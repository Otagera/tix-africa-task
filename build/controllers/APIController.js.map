{"version":3,"file":"APIController.js","sourceRoot":"","sources":["../../src/controllers/APIController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,4CAAoF;AACpF,sDAAgC;AAQhC,IAAM,UAAU,GAAG,kBAAQ,CAAC,KAAK,CAAQ,OAAO,CAAC,CAAC;AAGlD;IAAA;IAyCA,CAAC;IAtCM,gCAAQ,GAAd,UAAe,GAAoB,EAAE,GAAa;;;;;;wBAC3C,KAA4C,GAAG,CAAC,IAAI,EAAlD,IAAI,UAAA,EAAE,SAAS,eAAA,EAAE,OAAO,aAAA,EAAE,WAAW,iBAAA,CAAc;wBACrD,KAAK,GAAU;4BACpB,IAAI,MAAA;4BACJ,SAAS,WAAA;4BACT,OAAO,SAAA;4BACP,WAAW,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC;yBAClC,CAAA;;;;wBAEiB,qBAAM,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,EAAA;;wBAAzC,aAAW,SAA8B;wBAEzC,IAAI,GAAG,EAAE,OAAO,EAAE,0BAA0B,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;wBACpE,sBAAO,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAC;;;wBAE3C,sBAAO,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,KAAK,SAAA,EAAE,CAAC,EAAC;;;;;KAEvC;IAGK,iCAAS,GAAf,UAAgB,GAAoB,EAAE,GAAa;;;;;;wBAC1C,IAAI,GAAa,GAAG,KAAhB,EAAE,MAAM,GAAK,GAAG,OAAR,CAAS;wBACrB,IAAI,GAAsC,IAAI,KAA1C,EAAE,SAAS,GAA2B,IAAI,UAA/B,EAAE,OAAO,GAAkB,IAAI,QAAtB,EAAE,WAAW,GAAK,IAAI,YAAT,CAAU;wBACjD,KAAK,GAAU;4BACpB,IAAI,MAAA;4BACJ,SAAS,WAAA;4BACT,OAAO,SAAA;4BACP,WAAW,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC;yBAClC,CAAA;;;;wBAEqB,qBAAM,UAAU,CAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,EAAA;;wBAAhF,YAAY,GAAG,SAAiE;wBACtF,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;wBAEpB,IAAI,GAAG,EAAE,OAAO,EAAE,4BAA4B,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;wBACtE,sBAAO,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAC;;;wBAE3C,sBAAO,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,KAAK,SAAA,EAAE,CAAC,EAAC;;;;;KAEvC;IArCD;QAFC,YAAI,CAAC,YAAY,CAAC;QAClB,qBAAa,CAAC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,aAAa,CAAC;;;;iDAiB5D;IAGD;QAFC,YAAI,CAAC,sBAAsB,CAAC;QAC5B,qBAAa,CAAC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,aAAa,CAAC;;;;kDAmB5D;IAxCI,aAAa;QADlB,kBAAU,CAAC,MAAM,CAAC;OACb,aAAa,CAyClB;IAAD,oBAAC;CAAA,AAzCD,IAyCC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { get, post, bodyValidator, controller, del, use } from './decorators/index';\r\nimport mongoose from 'mongoose';\r\nimport { upload, clearUploads } from '../middlewares';\r\nimport {\r\n\tEvent,\r\n\tRequestWithBody,\r\n\tRequestWithParams\r\n} from '../interfaces/index';\r\n\r\nconst EventModel = mongoose.model<Event>('Event');\r\n\r\n@controller('/api')\r\nclass APIController {\r\n\t@post('/event/new')\r\n\t@bodyValidator('name', 'eventType', 'creator', 'timeOfEvent')\r\n\tasync newEvent(req: RequestWithBody, res: Response){\r\n\t\tconst { name, eventType, creator, timeOfEvent } = req.body;\r\n\t\tconst event: Event = {\r\n\t\t\tname,\r\n\t\t\teventType,\r\n\t\t\tcreator,\r\n\t\t\ttimeOfEvent: new Date(timeOfEvent)\r\n\t\t}\r\n\t\ttry{\r\n\t\t\tconst newEvent = await EventModel.create(event);\r\n\r\n\t\t\tconst data = { message: 'Event added successfully', success: true };\r\n\t\t\treturn res.statusJson(200, { data: data });\r\n\t\t}catch(error){\r\n\t\t\treturn res.statusJson(500, { error });\r\n\t\t}\r\n\t}\r\n\t@post('/event/edit/:eventId')\r\n\t@bodyValidator('name', 'eventType', 'creator', 'timeOfEvent')\r\n\tasync editEvent(req: RequestWithBody, res: Response){\r\n\t\tconst { body, params } = req;\r\n\t\tconst { name, eventType, creator, timeOfEvent } = body;\r\n\t\tconst event: Event = {\r\n\t\t\tname,\r\n\t\t\teventType,\r\n\t\t\tcreator,\r\n\t\t\ttimeOfEvent: new Date(timeOfEvent)\r\n\t\t}\r\n\t\ttry{\r\n\t\t\tconst updatedEvent = await EventModel.findOneAndUpdate({ _id: params.eventId }, event);\r\n\t\t\tconsole.log(updatedEvent);\r\n\r\n\t\t\tconst data = { message: 'Event updated successfully', success: true };\r\n\t\t\treturn res.statusJson(200, { data: data });\r\n\t\t}catch(error){\r\n\t\t\treturn res.statusJson(500, { error });\r\n\t\t}\r\n\t}\r\n}"]}